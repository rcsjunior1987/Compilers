
// ==========================================================================
//  GPPG error listing for yacc source file <parser.y - 17/04/2019 12:31:44>
// ==========================================================================
//  Version:  1.5.2
//  Machine:  DESKTOP-6UGF58D
//  DateTime: 17/04/2019 12:31:47
//  UserName: Roberto
// ==========================================================================


%namespace GPLexTutorial
%output=Parser.cs

%{
	public static AST.Declaration root;
%}


%union
{
    public int num;
    public string name;

	public AST.Node node;

	public AST.Statement stmt;
	public System.Collections.Generic.List<AST.Statement> stmts;

	public AST.Expression expr;

	public AST.Operator oper;

	public AST.Declaration decl;
	public System.Collections.Generic.List<AST.Declaration> decls;
	
	public AST.Modifier mod;
    public System.Collections.Generic.List<AST.Modifier> mods;

	public AST.Type type;

	public AST.FormalParameter fParm;
	public System.Collections.Generic.List<AST.FormalParameter> fParms;

	public AST.MethodDeclarator mDecl;

	public AST.MethodHeader mHead;

	public AST.VariableDeclarator vDecl;
	public System.Collections.Generic.List<AST.VariableDeclarator> vDecls;

	public AST.BlockStatement bStmt;
	public System.Collections.Generic.List<AST.VariableDeclarator> bStmts;

}

%token VOID INT CLASS PUBLIC STATIC

%token <num> NUMBER
%token <name> IDENT

%type <expr> StatementExpression
%type <expr> Assignment

%type <decl> CompilationUnit
%type <decl> OrdinaryCompilationUnit
%type <decl> ImportDeclarations
%type <decls> TypeDeclarations
%type <decl> TypeDeclaration
%type <decl> ClassDeclaration
%type <decl> NormalClassDeclaration
%type <mods> ClassModifiers
%type <mod> ClassModifier
%type <name> TypeIdentifier
%type <decls> ClassBody
%type <decl> ClassBodyDeclaration
%type <decls> ClassBodyDeclarations
%type <decl> ClassMemberDeclaration
%type <decl> MethodDeclaration
%type <mods> MethodModifiers
%type <mod> MethodModifier
%type <mHead> MethodHeader
%type <decl> MethodBody
%type <mDecl> MethodDeclarator
%type <fParms> FormalParameters
%type <fParm> FormalParameter 
%type <type> Result
%type <mods> VariableModifiers
%type <type> UnannType
%type <type> UnannReferenceType
%type <type> UnannArrayType
%type <name> UnannClassOrInterfaceType 
%type <name> UnannClassType
%type <name> VariableDeclaratorId
%type <type> NumericType
%type <type> UnannPrimitiveType
%type <type> LocalVariableType
%type <type> IntegralType
%type <name> VariableDeclaratorId
%type <vDecl> VariableDeclarator
%type <vDecls> VariableDeclarators
%type <stmt> LocalVariableDeclaration
%type <stmt> BlockStatement
%type <stmt> LocalVariableDeclarationStatement
%type <bStmt> MethodBody
%type <bStmt> Block
%type <stmts> BlockStatements_Opt
%type <expr> LeftHandSide 
%type <expr> ExpressionName
%type <oper> AssignmentOperator
%type <expr> Expression
%type <expr> AssignmentExpression
%type <expr> ConditionalExpression
%type <expr> ConditionalOrExpression
%type <expr> ConditionalAndExpression
%type <expr> InclusiveOrExpression
%type <expr> ExclusiveOrExpression
%type <expr> AndExpression
%type <expr> EqualityExpression
%type <expr> RelationalExpression
%type <expr> ShiftExpression
%type <expr> AdditiveExpression
%type <expr> MultiplicativeExpression
%type <expr> UnaryExpression
%type <expr> UnaryExpressionNotPlusMinus
%type <expr> PostfixExpression
%type <expr> Primary
%type <expr> PrimaryNoNewArray
%type <expr> Literal
%type <expr> IntegerLiteral
%type <expr> StatementWithoutTrailingSubstatement
%type <expr> Assignment
%type <stmt> Statement
%type <stmt> ExpressionStatement

%%
// Error: NonTerminal symbol "CompilationUnitDeclarator" has no productions
// Warning: Terminating CompilationUnitDeclarator fixes the following size-4 NonTerminal set
   // {CompilationUnit, Program, $accept, CompilationUnitDeclarator}
// Error: There are 4 non-terminating NonTerminal Symbols
   //  {CompilationUnit, Program, $accept, CompilationUnitDeclarator}
// -----------------------------------------------------------------------------------------

Program
	: CompilationUnit { root = $1; }
	;

CompilationUnit
    : OrdinaryCompilationUnit CompilationUnitDeclarator  {$$ = $1;}
    ;

OrdinaryCompilationUnit
    : PackageDeclaration_Opt ImportDeclarations TypeDeclarations { $$ = new AST.CompilationUnit($3); }
    ;

PackageDeclaration_Opt
    : /* empty */
    ;

ImportDeclarations
    : /* empty */
    ;

TypeDeclarations
    : TypeDeclarations TypeDeclaration { $$ = $1; $$.Add($2); }
    | /* empty */                      { $$ = new System.Collections.Generic.List<AST.Declaration>(); }                     
    ;

TypeDeclaration 
    : ClassDeclaration {$$ = $1;}
    ;

ClassDeclaration
    : NormalClassDeclaration {$$ = $1;}
    ;

NormalClassDeclaration
    : ClassModifiers CLASS TypeIdentifier TypeParameters_Opt Superclass_Opt Superinterfaces_Opt ClassBody { $$ = new AST.ClassDeclaration($1, $3, $7); }
    ;

ClassModifiers
    : ClassModifiers ClassModifier { $$ = $1; $$.Add($2); }
    | /* empty */                  { $$ = new System.Collections.Generic.List<AST.Modifier>(); } 
    ;
	
ClassModifier
    : PUBLIC { $$ = AST.Modifier.Public; }
    ;
	
TypeIdentifier
    : IDENT {$$ = $1;}
    ;

TypeParameters_Opt
    : /* empty */
    ;

Superclass_Opt
    : /* empty */
    ; 

Superinterfaces_Opt
    : /* empty */
    ;

ClassBody
    : '{' ClassBodyDeclarations '}' { $$ = $2; }
	;

ClassBodyDeclarations
    : ClassBodyDeclarations ClassBodyDeclaration { $$ = $1; $$.Add($2); }
    | /* empty */                                { $$ = new System.Collections.Generic.List<AST.Declaration>(); }
    ;

ClassBodyDeclaration
    : ClassMemberDeclaration { $$ = $1; }
    ;

ClassMemberDeclaration
    : MethodDeclaration { $$ = $1; }
    ;

MethodDeclaration
    : MethodModifiers MethodHeader MethodBody { $$ = new AST.MethodDeclaration($1, $2, $3); }
    ;

MethodModifiers
    : MethodModifiers MethodModifier { $$ = $1; $$.Add($2); }
    | /* empty */                    { $$ = new System.Collections.Generic.List<AST.Modifier>(); }
    ;

MethodModifier
    : PUBLIC { $$ = AST.Modifier.Public; }
    | STATIC { $$ = AST.Modifier.Static; }
    ;

MethodHeader
    : Result MethodDeclarator Throws_Opt { $$ = new AST.MethodHeader($1, $2); } 
    ;

Throws_Opt
    : /* empty */
	;
	
Result
    : VOID { $$ = new AST.VoidType(); }
    ;
	
MethodDeclarator
    : IDENT '(' ReceiverParameter_Opt FormalParameters ')' Dims_Opt { $$ = new AST.MethodDeclarator($1, $4); }
    ;

ReceiverParameter_Opt
    : /* empty */
    ;

FormalParameters
    : FormalParameters FormalParameter { $$ = $1; $$.Add($2); }
    | ',' FormalParameter              { $$ = new System.Collections.Generic.List<AST.FormalParameter>(); }
	| /* empty */                      { $$ = new System.Collections.Generic.List<AST.FormalParameter>(); } 
	;

FormalParameter 
    : VariableModifiers UnannType VariableDeclaratorId { $$ = new AST.FormalParameter($2, $3); }
    ;
	
VariableModifiers
    : /* empty */
    ;

UnannType
    : UnannReferenceType { $$ = $1; }
    ;

UnannReferenceType
    : UnannArrayType { $$ = $1; }
    ;

UnannArrayType
    : UnannClassOrInterfaceType Dims { $$ = new AST.ArrayType($1); }
    ;

UnannClassOrInterfaceType 
    : UnannClassType { $$ = $1; }
    ;

UnannClassType 
    : TypeIdentifier TypeArguments_Opt { $$ = $1; }
    ;

TypeIdentifier 
    : IDENT { $$ = $1; }
    ;

TypeArguments_Opt
    : /* empty */
    ;

Dims 
    : Annotations '[' ']' AnnotationArrays
    ;

AnnotationArrays
    : Annotations '[' ']'
    | /* empty */ 
    ;

Annotations
    : /* empty */
    ;

VariableDeclaratorId
    : IDENT Dims_Opt
    ;

Dims_Opt
    : /* empty */
    ;

MethodBody
    : Block  { $$ = $1; }
    ;

Block
    : '{' BlockStatements_Opt '}' { $$ = new AST.BlockStatement($2); }
    ;

BlockStatements_Opt
    : BlockStatements_Opt BlockStatement { $$ = $1; $$.Add($2); }
    | /* empty */                        { $$ = new System.Collections.Generic.List<AST.Statement>(); }         
    ;

BlockStatement
    : LocalVariableDeclarationStatement { $$ = $1; }
	| Statement                         { $$ = $1; }
    ;

LocalVariableDeclarationStatement
    : LocalVariableDeclaration ';' { $$ = $1; }
    ;

LocalVariableDeclaration
    : VariableModifiers LocalVariableType VariableDeclarators { $$ = new AST.LocalVariableDeclaration($2, $3); }
    ;

LocalVariableType
    : UnannType { $$ = $1; } 
    ;

UnannType 
    : UnannPrimitiveType { $$ = $1; }
    ;

UnannPrimitiveType 
    : NumericType { $$ = $1; }
    ;

NumericType
    : IntegralType { $$ = $1; }
    ;
	
IntegralType
    : INT { $$ = new AST.IntType(); }
    ;
VariableDeclarators
    : VariableDeclarators VariableDeclarator { $$ = $1; $$.Add($2); }
    | /* empty */                            { $$ = new System.Collections.Generic.List<AST.VariableDeclarator>(); }
	;

VariableDeclarator
    : VariableDeclaratorId VariableInitializer_Opt { $$ = new AST.VariableDeclarator($1); }
    ;

VariableInitializer_Opt
    : /* empty */
    ;

VariableDeclaratorId
    : IDENT Dims_Opt { $$ = $1; }
    ;

Statement
    : StatementWithoutTrailingSubstatement 
    ;

StatementWithoutTrailingSubstatement 
    : ExpressionStatement
    ;

ExpressionStatement
    : StatementExpression ';' { $$ = new AST.StatementFromExpression($1); }
    ;

StatementExpression
    : Assignment
    ;

Assignment
    : LeftHandSide AssignmentOperator Expression { $$ = new AST.AssignmentExpression($1, $2, $3); }
    ;

LeftHandSide
    : ExpressionName { $$ = $1; }
    ;

ExpressionName
    : IDENT { $$ = new AST.ExpressionName($1); } 
    ;

AssignmentOperator
    : IDENT  { $$ = new AST.AssignmentOperator($1); }
    ; 

Expression
    : AssignmentExpression { $$ = $1; }
    ;

AssignmentExpression
    : ConditionalExpression { $$ = $1; }
    ;

ConditionalExpression 
    : ConditionalOrExpression { $$ = $1; }
    ;

ConditionalOrExpression 
    : ConditionalAndExpression { $$ = $1; }
    ;

ConditionalAndExpression 
    : InclusiveOrExpression { $$ = $1; }
    ;

InclusiveOrExpression 
    : ExclusiveOrExpression { $$ = $1; }
    ;

ExclusiveOrExpression
    : AndExpression { $$ = $1; }
    ;

AndExpression 
    : EqualityExpression { $$ = $1; }
    ;

EqualityExpression
    : RelationalExpression { $$ = $1; }
    ;

RelationalExpression 
    : ShiftExpression { $$ = $1; }
    ;

ShiftExpression 
    : AdditiveExpression { $$ = $1; }
    ;

AdditiveExpression
    : MultiplicativeExpression { $$ = $1; }
    ;

MultiplicativeExpression
    : UnaryExpression { $$ = $1; }
    ;

UnaryExpression 
    : UnaryExpressionNotPlusMinus { $$ = $1; }
    ;

UnaryExpressionNotPlusMinus
    : PostfixExpression { $$ = $1; }
    ;

PostfixExpression 
    : Primary { $$ = $1; }
    ;

Primary 
    : PrimaryNoNewArray { $$ = $1; }
    ;

PrimaryNoNewArray 
    : Literal { $$ = $1; }
    ;

Literal
    : IntegerLiteral { $$ = $1; }
	;

IntegerLiteral
    : NUMBER { $$ = new AST.IntegerLiteral($1); }
	;

%%

public Parser(Scanner scanner) : base(scanner)
{
}
// ==========================================================================

