// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  DESKTOP-6UGF58D
// DateTime: 10/06/2019 11:51:40
// UserName: Roberto
// Input file <parser.y - 29/05/2019 19:57:02>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace GPLexTutorial
{
public enum Tokens {
    error=127,EOF=128,VOID=129,INT=130,CLASS=131,PUBLIC=132,
    STATIC=133,NUMBER=134,IDENT=135};

public struct ValueType
#line 10 "parser.y"
{
    public int num;
    public string name;

	public AST.Node node;

	public AST.Statement stmt;
	public System.Collections.Generic.List<AST.Statement> stmts;

	public AST.Expression expr;

	public AST.Operator oper;

	public AST.Declaration decl;
	public System.Collections.Generic.List<AST.Declaration> decls;
	
	public AST.Modifier mod;
    public System.Collections.Generic.List<AST.Modifier> mods;

	public AST.Type type;

	public AST.FormalParameter fParm;
	public System.Collections.Generic.List<AST.FormalParameter> fParms;

	public AST.MethodDeclarator mDecl;

	public AST.MethodHeader mHead;

	public AST.VariableDeclarator vDecl;
	public System.Collections.Generic.List<AST.VariableDeclarator> vDecls;

	public AST.BlockStatement bStmt;
	public System.Collections.Generic.List<AST.VariableDeclarator> bStmts;

}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from parser.y - 29/05/2019 19:57:02
#line 5 "parser.y"
	public static AST.Declaration root;
#line default
  // End verbatim content from parser.y - 29/05/2019 19:57:02

#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[98];
  private static State[] states = new State[116];
  private static string[] nonTerms = new string[] {
      "StatementExpression", "Assignment", "CompilationUnit", "OrdinaryCompilationUnit", 
      "ImportDeclarations", "TypeDeclarations", "TypeDeclaration", "ClassDeclaration", 
      "NormalClassDeclaration", "ClassModifiers", "ClassModifier", "TypeIdentifier", 
      "ClassBody", "ClassBodyDeclaration", "ClassBodyDeclarations", "ClassMemberDeclaration", 
      "MethodDeclaration", "MethodModifiers", "MethodModifier", "MethodHeader", 
      "MethodBody", "MethodDeclarator", "FormalParameters", "FormalParameter", 
      "Result", "VariableModifiers", "UnannType", "UnannReferenceType", "UnannArrayType", 
      "UnannClassOrInterfaceType", "UnannClassType", "VariableDeclaratorId", 
      "NumericType", "UnannPrimitiveType", "LocalVariableType", "IntegralType", 
      "VariableDeclarator", "VariableDeclarators", "LocalVariableDeclaration", 
      "BlockStatement", "LocalVariableDeclarationStatement", "Block", "BlockStatements_Opt", 
      "LeftHandSide", "ExpressionName", "AssignmentOperator", "Expression", "AssignmentExpression", 
      "ConditionalExpression", "ConditionalOrExpression", "ConditionalAndExpression", 
      "InclusiveOrExpression", "ExclusiveOrExpression", "AndExpression", "EqualityExpression", 
      "RelationalExpression", "ShiftExpression", "AdditiveExpression", "MultiplicativeExpression", 
      "UnaryExpression", "UnaryExpressionNotPlusMinus", "PostfixExpression", 
      "Primary", "PrimaryNoNewArray", "Literal", "IntegerLiteral", "StatementWithoutTrailingSubstatement", 
      "Statement", "ExpressionStatement", "Program", "$accept", "PackageDeclaration_Opt", 
      "TypeParameters_Opt", "Superclass_Opt", "Superinterfaces_Opt", "Throws_Opt", 
      "ReceiverParameter_Opt", "Dims_Opt", "Dims", "TypeArguments_Opt", "Annotations", 
      "AnnotationArrays", "VariableInitializer_Opt", };

  static Parser() {
    states[0] = new State(-5,new int[]{-70,1,-3,3,-4,4,-72,5});
    states[1] = new State(new int[]{128,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(-3);
    states[5] = new State(-6,new int[]{-5,6});
    states[6] = new State(-8,new int[]{-6,7});
    states[7] = new State(new int[]{128,-4,131,-13,132,-13},new int[]{-7,8,-8,9,-9,10,-10,11});
    states[8] = new State(-7);
    states[9] = new State(-9);
    states[10] = new State(-10);
    states[11] = new State(new int[]{131,12,132,115},new int[]{-11,114});
    states[12] = new State(new int[]{135,58},new int[]{-12,13});
    states[13] = new State(-16,new int[]{-73,14});
    states[14] = new State(-17,new int[]{-74,15});
    states[15] = new State(-18,new int[]{-75,16});
    states[16] = new State(new int[]{123,18},new int[]{-13,17});
    states[17] = new State(-11);
    states[18] = new State(-21,new int[]{-15,19});
    states[19] = new State(new int[]{125,20,129,-26,132,-26,133,-26},new int[]{-14,21,-16,22,-17,23,-18,24});
    states[20] = new State(-19);
    states[21] = new State(-20);
    states[22] = new State(-22);
    states[23] = new State(-23);
    states[24] = new State(new int[]{129,111,132,112,133,113},new int[]{-20,25,-19,95,-25,96});
    states[25] = new State(new int[]{123,28},new int[]{-21,26,-42,27});
    states[26] = new State(-24);
    states[27] = new State(-52);
    states[28] = new State(-55,new int[]{-43,29});
    states[29] = new State(new int[]{125,30,135,94,130,-38},new int[]{-40,31,-41,32,-39,33,-26,35,-68,63,-67,64,-69,65,-1,66,-2,68,-44,69,-45,93});
    states[30] = new State(-53);
    states[31] = new State(-54);
    states[32] = new State(-56);
    states[33] = new State(new int[]{59,34});
    states[34] = new State(-58);
    states[35] = new State(new int[]{135,58,130,62},new int[]{-35,36,-27,43,-28,44,-29,45,-30,46,-31,55,-12,56,-34,59,-33,60,-36,61});
    states[36] = new State(-66,new int[]{-38,37});
    states[37] = new State(new int[]{135,41,59,-59},new int[]{-37,38,-32,39});
    states[38] = new State(-65);
    states[39] = new State(-68,new int[]{-83,40});
    states[40] = new State(-67);
    states[41] = new State(-51,new int[]{-78,42});
    states[42] = new State(-50);
    states[43] = new State(-60);
    states[44] = new State(-39);
    states[45] = new State(-40);
    states[46] = new State(-49,new int[]{-79,47,-81,48});
    states[47] = new State(-41);
    states[48] = new State(new int[]{91,49});
    states[49] = new State(new int[]{93,50});
    states[50] = new State(new int[]{91,-49,135,-48,59,-48},new int[]{-82,51,-81,52});
    states[51] = new State(-46);
    states[52] = new State(new int[]{91,53});
    states[53] = new State(new int[]{93,54});
    states[54] = new State(-47);
    states[55] = new State(-42);
    states[56] = new State(-45,new int[]{-80,57});
    states[57] = new State(-43);
    states[58] = new State(-15);
    states[59] = new State(-61);
    states[60] = new State(-62);
    states[61] = new State(-63);
    states[62] = new State(-64);
    states[63] = new State(-57);
    states[64] = new State(-70);
    states[65] = new State(-71);
    states[66] = new State(new int[]{59,67});
    states[67] = new State(-72);
    states[68] = new State(-73);
    states[69] = new State(new int[]{135,92},new int[]{-46,70});
    states[70] = new State(new int[]{134,91},new int[]{-47,71,-48,72,-49,73,-50,74,-51,75,-52,76,-53,77,-54,78,-55,79,-56,80,-57,81,-58,82,-59,83,-60,84,-61,85,-62,86,-63,87,-64,88,-65,89,-66,90});
    states[71] = new State(-74);
    states[72] = new State(-78);
    states[73] = new State(-79);
    states[74] = new State(-80);
    states[75] = new State(-81);
    states[76] = new State(-82);
    states[77] = new State(-83);
    states[78] = new State(-84);
    states[79] = new State(-85);
    states[80] = new State(-86);
    states[81] = new State(-87);
    states[82] = new State(-88);
    states[83] = new State(-89);
    states[84] = new State(-90);
    states[85] = new State(-91);
    states[86] = new State(-92);
    states[87] = new State(-93);
    states[88] = new State(-94);
    states[89] = new State(-95);
    states[90] = new State(-96);
    states[91] = new State(-97);
    states[92] = new State(-77);
    states[93] = new State(-75);
    states[94] = new State(-76);
    states[95] = new State(-25);
    states[96] = new State(new int[]{135,99},new int[]{-22,97});
    states[97] = new State(-30,new int[]{-76,98});
    states[98] = new State(-29);
    states[99] = new State(new int[]{40,100});
    states[100] = new State(-33,new int[]{-77,101});
    states[101] = new State(new int[]{44,109,41,-36,135,-36,130,-36},new int[]{-23,102});
    states[102] = new State(new int[]{41,103,135,-38,130,-38},new int[]{-24,105,-26,106});
    states[103] = new State(-51,new int[]{-78,104});
    states[104] = new State(-32);
    states[105] = new State(-34);
    states[106] = new State(new int[]{135,58,130,62},new int[]{-27,107,-28,44,-29,45,-30,46,-31,55,-12,56,-34,59,-33,60,-36,61});
    states[107] = new State(new int[]{135,41},new int[]{-32,108});
    states[108] = new State(-37);
    states[109] = new State(-38,new int[]{-24,110,-26,106});
    states[110] = new State(-35);
    states[111] = new State(-31);
    states[112] = new State(-27);
    states[113] = new State(-28);
    states[114] = new State(-12);
    states[115] = new State(-14);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-71, new int[]{-70,128});
    rules[2] = new Rule(-70, new int[]{-3});
    rules[3] = new Rule(-3, new int[]{-4});
    rules[4] = new Rule(-4, new int[]{-72,-5,-6});
    rules[5] = new Rule(-72, new int[]{});
    rules[6] = new Rule(-5, new int[]{});
    rules[7] = new Rule(-6, new int[]{-6,-7});
    rules[8] = new Rule(-6, new int[]{});
    rules[9] = new Rule(-7, new int[]{-8});
    rules[10] = new Rule(-8, new int[]{-9});
    rules[11] = new Rule(-9, new int[]{-10,131,-12,-73,-74,-75,-13});
    rules[12] = new Rule(-10, new int[]{-10,-11});
    rules[13] = new Rule(-10, new int[]{});
    rules[14] = new Rule(-11, new int[]{132});
    rules[15] = new Rule(-12, new int[]{135});
    rules[16] = new Rule(-73, new int[]{});
    rules[17] = new Rule(-74, new int[]{});
    rules[18] = new Rule(-75, new int[]{});
    rules[19] = new Rule(-13, new int[]{123,-15,125});
    rules[20] = new Rule(-15, new int[]{-15,-14});
    rules[21] = new Rule(-15, new int[]{});
    rules[22] = new Rule(-14, new int[]{-16});
    rules[23] = new Rule(-16, new int[]{-17});
    rules[24] = new Rule(-17, new int[]{-18,-20,-21});
    rules[25] = new Rule(-18, new int[]{-18,-19});
    rules[26] = new Rule(-18, new int[]{});
    rules[27] = new Rule(-19, new int[]{132});
    rules[28] = new Rule(-19, new int[]{133});
    rules[29] = new Rule(-20, new int[]{-25,-22,-76});
    rules[30] = new Rule(-76, new int[]{});
    rules[31] = new Rule(-25, new int[]{129});
    rules[32] = new Rule(-22, new int[]{135,40,-77,-23,41,-78});
    rules[33] = new Rule(-77, new int[]{});
    rules[34] = new Rule(-23, new int[]{-23,-24});
    rules[35] = new Rule(-23, new int[]{44,-24});
    rules[36] = new Rule(-23, new int[]{});
    rules[37] = new Rule(-24, new int[]{-26,-27,-32});
    rules[38] = new Rule(-26, new int[]{});
    rules[39] = new Rule(-27, new int[]{-28});
    rules[40] = new Rule(-28, new int[]{-29});
    rules[41] = new Rule(-29, new int[]{-30,-79});
    rules[42] = new Rule(-30, new int[]{-31});
    rules[43] = new Rule(-31, new int[]{-12,-80});
    rules[44] = new Rule(-12, new int[]{135});
    rules[45] = new Rule(-80, new int[]{});
    rules[46] = new Rule(-79, new int[]{-81,91,93,-82});
    rules[47] = new Rule(-82, new int[]{-81,91,93});
    rules[48] = new Rule(-82, new int[]{});
    rules[49] = new Rule(-81, new int[]{});
    rules[50] = new Rule(-32, new int[]{135,-78});
    rules[51] = new Rule(-78, new int[]{});
    rules[52] = new Rule(-21, new int[]{-42});
    rules[53] = new Rule(-42, new int[]{123,-43,125});
    rules[54] = new Rule(-43, new int[]{-43,-40});
    rules[55] = new Rule(-43, new int[]{});
    rules[56] = new Rule(-40, new int[]{-41});
    rules[57] = new Rule(-40, new int[]{-68});
    rules[58] = new Rule(-41, new int[]{-39,59});
    rules[59] = new Rule(-39, new int[]{-26,-35,-38});
    rules[60] = new Rule(-35, new int[]{-27});
    rules[61] = new Rule(-27, new int[]{-34});
    rules[62] = new Rule(-34, new int[]{-33});
    rules[63] = new Rule(-33, new int[]{-36});
    rules[64] = new Rule(-36, new int[]{130});
    rules[65] = new Rule(-38, new int[]{-38,-37});
    rules[66] = new Rule(-38, new int[]{});
    rules[67] = new Rule(-37, new int[]{-32,-83});
    rules[68] = new Rule(-83, new int[]{});
    rules[69] = new Rule(-32, new int[]{135,-78});
    rules[70] = new Rule(-68, new int[]{-67});
    rules[71] = new Rule(-67, new int[]{-69});
    rules[72] = new Rule(-69, new int[]{-1,59});
    rules[73] = new Rule(-1, new int[]{-2});
    rules[74] = new Rule(-2, new int[]{-44,-46,-47});
    rules[75] = new Rule(-44, new int[]{-45});
    rules[76] = new Rule(-45, new int[]{135});
    rules[77] = new Rule(-46, new int[]{135});
    rules[78] = new Rule(-47, new int[]{-48});
    rules[79] = new Rule(-48, new int[]{-49});
    rules[80] = new Rule(-49, new int[]{-50});
    rules[81] = new Rule(-50, new int[]{-51});
    rules[82] = new Rule(-51, new int[]{-52});
    rules[83] = new Rule(-52, new int[]{-53});
    rules[84] = new Rule(-53, new int[]{-54});
    rules[85] = new Rule(-54, new int[]{-55});
    rules[86] = new Rule(-55, new int[]{-56});
    rules[87] = new Rule(-56, new int[]{-57});
    rules[88] = new Rule(-57, new int[]{-58});
    rules[89] = new Rule(-58, new int[]{-59});
    rules[90] = new Rule(-59, new int[]{-60});
    rules[91] = new Rule(-60, new int[]{-61});
    rules[92] = new Rule(-61, new int[]{-62});
    rules[93] = new Rule(-62, new int[]{-63});
    rules[94] = new Rule(-63, new int[]{-64});
    rules[95] = new Rule(-64, new int[]{-65});
    rules[96] = new Rule(-65, new int[]{-66});
    rules[97] = new Rule(-66, new int[]{134});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // Program -> CompilationUnit
#line 128 "parser.y"
                   { root = ValueStack[ValueStack.Depth-1].decl; }
#line default
        break;
      case 3: // CompilationUnit -> OrdinaryCompilationUnit
#line 132 "parser.y"
                              { CurrentSemanticValue.decl = new AST.CompilationUnitDeclarator(ValueStack[ValueStack.Depth-1].node); }
#line default
        break;
      case 4: // OrdinaryCompilationUnit -> PackageDeclaration_Opt, ImportDeclarations, 
              //                            TypeDeclarations
#line 136 "parser.y"
                                                                 { CurrentSemanticValue.node = new AST.CompilationUnit(ValueStack[ValueStack.Depth-1].decls); }
#line default
        break;
      case 7: // TypeDeclarations -> TypeDeclarations, TypeDeclaration
#line 148 "parser.y"
                                       { CurrentSemanticValue.decls = ValueStack[ValueStack.Depth-2].decls; CurrentSemanticValue.decls.Add(ValueStack[ValueStack.Depth-1].decl); }
#line default
        break;
      case 8: // TypeDeclarations -> /* empty */
#line 149 "parser.y"
                                       { CurrentSemanticValue.decls = new System.Collections.Generic.List<AST.Declaration>(); }
#line default
        break;
      case 9: // TypeDeclaration -> ClassDeclaration
#line 153 "parser.y"
                       {CurrentSemanticValue.decl = ValueStack[ValueStack.Depth-1].decl;}
#line default
        break;
      case 10: // ClassDeclaration -> NormalClassDeclaration
#line 157 "parser.y"
                             {CurrentSemanticValue.decl = ValueStack[ValueStack.Depth-1].decl;}
#line default
        break;
      case 11: // NormalClassDeclaration -> ClassModifiers, CLASS, TypeIdentifier, 
               //                           TypeParameters_Opt, Superclass_Opt, 
               //                           Superinterfaces_Opt, ClassBody
#line 161 "parser.y"
                                                                                                          { CurrentSemanticValue.decl = new AST.ClassDeclaration(ValueStack[ValueStack.Depth-7].mods, ValueStack[ValueStack.Depth-5].name, ValueStack[ValueStack.Depth-1].decls); }
#line default
        break;
      case 12: // ClassModifiers -> ClassModifiers, ClassModifier
#line 165 "parser.y"
                                   { CurrentSemanticValue.mods = ValueStack[ValueStack.Depth-2].mods; CurrentSemanticValue.mods.Add(ValueStack[ValueStack.Depth-1].mod); }
#line default
        break;
      case 13: // ClassModifiers -> /* empty */
#line 166 "parser.y"
                                   { CurrentSemanticValue.mods = new System.Collections.Generic.List<AST.Modifier>(); }
#line default
        break;
      case 14: // ClassModifier -> PUBLIC
#line 170 "parser.y"
             { CurrentSemanticValue.mod = AST.Modifier.Public; }
#line default
        break;
      case 15: // TypeIdentifier -> IDENT
#line 174 "parser.y"
            {CurrentSemanticValue.name = ValueStack[ValueStack.Depth-1].name;}
#line default
        break;
      case 19: // ClassBody -> '{', ClassBodyDeclarations, '}'
#line 190 "parser.y"
                                    { CurrentSemanticValue.decls = ValueStack[ValueStack.Depth-2].decls; }
#line default
        break;
      case 20: // ClassBodyDeclarations -> ClassBodyDeclarations, ClassBodyDeclaration
#line 194 "parser.y"
                                                 { CurrentSemanticValue.decls = ValueStack[ValueStack.Depth-2].decls; CurrentSemanticValue.decls.Add(ValueStack[ValueStack.Depth-1].decl); }
#line default
        break;
      case 21: // ClassBodyDeclarations -> /* empty */
#line 195 "parser.y"
                                                 { CurrentSemanticValue.decls = new System.Collections.Generic.List<AST.Declaration>(); }
#line default
        break;
      case 22: // ClassBodyDeclaration -> ClassMemberDeclaration
#line 199 "parser.y"
                             { CurrentSemanticValue.decl = ValueStack[ValueStack.Depth-1].decl; }
#line default
        break;
      case 23: // ClassMemberDeclaration -> MethodDeclaration
#line 203 "parser.y"
                        { CurrentSemanticValue.decl = ValueStack[ValueStack.Depth-1].decl; }
#line default
        break;
      case 24: // MethodDeclaration -> MethodModifiers, MethodHeader, MethodBody
#line 207 "parser.y"
                                              { CurrentSemanticValue.decl = new AST.MethodDeclaration(ValueStack[ValueStack.Depth-3].mods, ValueStack[ValueStack.Depth-2].mHead, ValueStack[ValueStack.Depth-1].bStmt); }
#line default
        break;
      case 25: // MethodModifiers -> MethodModifiers, MethodModifier
#line 211 "parser.y"
                                     { CurrentSemanticValue.mods = ValueStack[ValueStack.Depth-2].mods; CurrentSemanticValue.mods.Add(ValueStack[ValueStack.Depth-1].mod); }
#line default
        break;
      case 26: // MethodModifiers -> /* empty */
#line 212 "parser.y"
                                     { CurrentSemanticValue.mods = new System.Collections.Generic.List<AST.Modifier>(); }
#line default
        break;
      case 27: // MethodModifier -> PUBLIC
#line 216 "parser.y"
             { CurrentSemanticValue.mod = AST.Modifier.Public; }
#line default
        break;
      case 28: // MethodModifier -> STATIC
#line 217 "parser.y"
             { CurrentSemanticValue.mod = AST.Modifier.Static; }
#line default
        break;
      case 29: // MethodHeader -> Result, MethodDeclarator, Throws_Opt
#line 221 "parser.y"
                                         { CurrentSemanticValue.mHead = new AST.MethodHeader(ValueStack[ValueStack.Depth-3].type, ValueStack[ValueStack.Depth-2].mDecl); }
#line default
        break;
      case 31: // Result -> VOID
#line 229 "parser.y"
           { CurrentSemanticValue.type = new AST.VoidType(); }
#line default
        break;
      case 32: // MethodDeclarator -> IDENT, '(', ReceiverParameter_Opt, FormalParameters, ')', 
               //                     Dims_Opt
#line 233 "parser.y"
                                                                    { CurrentSemanticValue.mDecl = new AST.MethodDeclarator(ValueStack[ValueStack.Depth-6].name, ValueStack[ValueStack.Depth-3].fParms); }
#line default
        break;
      case 34: // FormalParameters -> FormalParameters, FormalParameter
#line 241 "parser.y"
                                       { CurrentSemanticValue.fParms = ValueStack[ValueStack.Depth-2].fParms; CurrentSemanticValue.fParms.Add(ValueStack[ValueStack.Depth-1].fParm); }
#line default
        break;
      case 35: // FormalParameters -> ',', FormalParameter
#line 242 "parser.y"
                                       { CurrentSemanticValue.fParms = new System.Collections.Generic.List<AST.FormalParameter>(); }
#line default
        break;
      case 36: // FormalParameters -> /* empty */
#line 243 "parser.y"
                                    { CurrentSemanticValue.fParms = new System.Collections.Generic.List<AST.FormalParameter>(); }
#line default
        break;
      case 37: // FormalParameter -> VariableModifiers, UnannType, VariableDeclaratorId
#line 247 "parser.y"
                                                       { CurrentSemanticValue.fParm = new AST.FormalParameter(ValueStack[ValueStack.Depth-2].type, ValueStack[ValueStack.Depth-1].name); }
#line default
        break;
      case 39: // UnannType -> UnannReferenceType
#line 255 "parser.y"
                         { CurrentSemanticValue.type = ValueStack[ValueStack.Depth-1].type; }
#line default
        break;
      case 40: // UnannReferenceType -> UnannArrayType
#line 259 "parser.y"
                     { CurrentSemanticValue.type = ValueStack[ValueStack.Depth-1].type; }
#line default
        break;
      case 41: // UnannArrayType -> UnannClassOrInterfaceType, Dims
#line 263 "parser.y"
                                     { CurrentSemanticValue.type = new AST.ArrayType(ValueStack[ValueStack.Depth-2].name); }
#line default
        break;
      case 42: // UnannClassOrInterfaceType -> UnannClassType
#line 267 "parser.y"
                     { CurrentSemanticValue.name = ValueStack[ValueStack.Depth-1].name; }
#line default
        break;
      case 43: // UnannClassType -> TypeIdentifier, TypeArguments_Opt
#line 271 "parser.y"
                                       { CurrentSemanticValue.name = ValueStack[ValueStack.Depth-2].name; }
#line default
        break;
      case 44: // TypeIdentifier -> IDENT
#line 275 "parser.y"
            { CurrentSemanticValue.name = ValueStack[ValueStack.Depth-1].name; }
#line default
        break;
      case 52: // MethodBody -> Block
#line 304 "parser.y"
             { CurrentSemanticValue.bStmt = ValueStack[ValueStack.Depth-1].bStmt; }
#line default
        break;
      case 53: // Block -> '{', BlockStatements_Opt, '}'
#line 308 "parser.y"
                                  { CurrentSemanticValue.bStmt = new AST.BlockStatement(ValueStack[ValueStack.Depth-2].stmts); }
#line default
        break;
      case 54: // BlockStatements_Opt -> BlockStatements_Opt, BlockStatement
#line 312 "parser.y"
                                         { CurrentSemanticValue.stmts = ValueStack[ValueStack.Depth-2].stmts; CurrentSemanticValue.stmts.Add(ValueStack[ValueStack.Depth-1].stmt); }
#line default
        break;
      case 55: // BlockStatements_Opt -> /* empty */
#line 313 "parser.y"
                                         { CurrentSemanticValue.stmts = new System.Collections.Generic.List<AST.Statement>(); }
#line default
        break;
      case 56: // BlockStatement -> LocalVariableDeclarationStatement
#line 317 "parser.y"
                                        { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 57: // BlockStatement -> Statement
#line 318 "parser.y"
                                     { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 58: // LocalVariableDeclarationStatement -> LocalVariableDeclaration, ';'
#line 322 "parser.y"
                                   { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-2].stmt; }
#line default
        break;
      case 59: // LocalVariableDeclaration -> VariableModifiers, LocalVariableType, 
               //                             VariableDeclarators
#line 326 "parser.y"
                                                              { CurrentSemanticValue.stmt = new AST.LocalVariableDeclaration(ValueStack[ValueStack.Depth-2].type, ValueStack[ValueStack.Depth-1].vDecls); }
#line default
        break;
      case 60: // LocalVariableType -> UnannType
#line 330 "parser.y"
                { CurrentSemanticValue.type = ValueStack[ValueStack.Depth-1].type; }
#line default
        break;
      case 61: // UnannType -> UnannPrimitiveType
#line 334 "parser.y"
                         { CurrentSemanticValue.type = ValueStack[ValueStack.Depth-1].type; }
#line default
        break;
      case 62: // UnannPrimitiveType -> NumericType
#line 338 "parser.y"
                  { CurrentSemanticValue.type = ValueStack[ValueStack.Depth-1].type; }
#line default
        break;
      case 63: // NumericType -> IntegralType
#line 342 "parser.y"
                   { CurrentSemanticValue.type = ValueStack[ValueStack.Depth-1].type; }
#line default
        break;
      case 64: // IntegralType -> INT
#line 346 "parser.y"
          { CurrentSemanticValue.type = new AST.IntType(); }
#line default
        break;
      case 65: // VariableDeclarators -> VariableDeclarators, VariableDeclarator
#line 349 "parser.y"
                                             { CurrentSemanticValue.vDecls = ValueStack[ValueStack.Depth-2].vDecls; CurrentSemanticValue.vDecls.Add(ValueStack[ValueStack.Depth-1].vDecl); }
#line default
        break;
      case 66: // VariableDeclarators -> /* empty */
#line 350 "parser.y"
                                             { CurrentSemanticValue.vDecls = new System.Collections.Generic.List<AST.VariableDeclarator>(); }
#line default
        break;
      case 67: // VariableDeclarator -> VariableDeclaratorId, VariableInitializer_Opt
#line 354 "parser.y"
                                                   { CurrentSemanticValue.vDecl = new AST.VariableDeclarator(ValueStack[ValueStack.Depth-2].name); }
#line default
        break;
      case 69: // VariableDeclaratorId -> IDENT, Dims_Opt
#line 362 "parser.y"
                     { CurrentSemanticValue.name = ValueStack[ValueStack.Depth-2].name; }
#line default
        break;
      case 72: // ExpressionStatement -> StatementExpression, ';'
#line 374 "parser.y"
                              { CurrentSemanticValue.stmt = new AST.StatementFromExpression(ValueStack[ValueStack.Depth-2].expr); }
#line default
        break;
      case 74: // Assignment -> LeftHandSide, AssignmentOperator, Expression
#line 382 "parser.y"
                                                 { CurrentSemanticValue.expr = new AST.AssignmentExpression(ValueStack[ValueStack.Depth-3].expr, ValueStack[ValueStack.Depth-2].oper, ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 75: // LeftHandSide -> ExpressionName
#line 386 "parser.y"
                     { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 76: // ExpressionName -> IDENT
#line 390 "parser.y"
            { CurrentSemanticValue.expr = new AST.ExpressionName(ValueStack[ValueStack.Depth-1].name); }
#line default
        break;
      case 77: // AssignmentOperator -> IDENT
#line 394 "parser.y"
             { CurrentSemanticValue.oper = new AST.AssignmentOperator(ValueStack[ValueStack.Depth-1].name); }
#line default
        break;
      case 78: // Expression -> AssignmentExpression
#line 398 "parser.y"
                           { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 79: // AssignmentExpression -> ConditionalExpression
#line 402 "parser.y"
                            { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 80: // ConditionalExpression -> ConditionalOrExpression
#line 406 "parser.y"
                              { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 81: // ConditionalOrExpression -> ConditionalAndExpression
#line 410 "parser.y"
                               { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 82: // ConditionalAndExpression -> InclusiveOrExpression
#line 414 "parser.y"
                            { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 83: // InclusiveOrExpression -> ExclusiveOrExpression
#line 418 "parser.y"
                            { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 84: // ExclusiveOrExpression -> AndExpression
#line 422 "parser.y"
                    { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 85: // AndExpression -> EqualityExpression
#line 426 "parser.y"
                         { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 86: // EqualityExpression -> RelationalExpression
#line 430 "parser.y"
                           { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 87: // RelationalExpression -> ShiftExpression
#line 434 "parser.y"
                      { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 88: // ShiftExpression -> AdditiveExpression
#line 438 "parser.y"
                         { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 89: // AdditiveExpression -> MultiplicativeExpression
#line 442 "parser.y"
                               { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 90: // MultiplicativeExpression -> UnaryExpression
#line 446 "parser.y"
                      { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 91: // UnaryExpression -> UnaryExpressionNotPlusMinus
#line 450 "parser.y"
                                  { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 92: // UnaryExpressionNotPlusMinus -> PostfixExpression
#line 454 "parser.y"
                        { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 93: // PostfixExpression -> Primary
#line 458 "parser.y"
              { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 94: // Primary -> PrimaryNoNewArray
#line 462 "parser.y"
                        { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 95: // PrimaryNoNewArray -> Literal
#line 466 "parser.y"
              { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 96: // Literal -> IntegerLiteral
#line 470 "parser.y"
                     { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 97: // IntegerLiteral -> NUMBER
#line 474 "parser.y"
             { CurrentSemanticValue.expr = new AST.IntegerLiteral(ValueStack[ValueStack.Depth-1].num); }
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 478 "parser.y"

public Parser(Scanner scanner) : base(scanner)
{
}
#line default
}
}
