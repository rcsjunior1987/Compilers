%namespace ManagedCompiler
%output=Parser.cs

%{
public static AST.Statement root;
%}

%union
{
    public AST.Expression expr;
	public AST.Statement stmt;
	public AST.Type type;
	public System.Collections.Generic.List<AST.Statement> stmts;
	public int num;
	public char name;
}

%token <num> NUMBER
%token <name> IDENT
%token IF ELSE INT BOOL

%type <expr> Expression
%type <stmt> Statement
%type <type> Type
%type <stmts> StatementList

%left '='
%nonassoc '<'
%left '+'

%%

Program : Statement											{ root = $1; }
        ;

Statement : IF '(' Expression ')' Statement ELSE Statement	{ $$ = new AST.IfStatement($3, $5, $7); }
          | '{' StatementList '}'							{ $$ = new AST.CompoundStatement($2);   }
		  | Expression ';'									{ $$ = new AST.ExpressionStatement($1); }
		  | Type IDENT ';'									{ $$ = new AST.VariableDeclaration($1,$2); }
		  ;

Type : INT													{ $$ = new AST.IntType(); }
     | BOOL													{ $$ = new AST.BoolType(); }
	 ;

StatementList : StatementList Statement				    	{ $$ = $1; $$.Add($2);    }
              | /* empty */									{ $$ = new System.Collections.Generic.List<AST.Statement>(); }
			  ;

Expression : NUMBER											{ $$ = new AST.NumberExpression($1);         }
           | IDENT											{ $$ = new AST.IdentifierExpression($1);     }
		   | Expression '=' Expression						{ $$ = new AST.AssignmentExpression($1, $3); }
		   | Expression '+' Expression						{ $$ = new AST.BinaryExpression($1,'+',$3);  }
		   | Expression '<' Expression						{ $$ = new AST.BinaryExpression($1,'<',$3);  }
		   ;

%%

int yywrap()
{
    return 1;
}

public Parser(Scanner scanner) : base(scanner)
{
}